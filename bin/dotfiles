#!/bin/bash

echo 'dotfiles'

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP

Usage: $(basename "$0")

See the README for documentation.
https://github.com/jcrafford/dotfiles
HELP
exit; fi

function e_header()  { echo -e "\n\033[1m$@\033[0m"; }
function e_success() { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()   { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()   { echo -e " \033[1;33m➜\033[0m  $@"; }

###############################################################################
# Installation Dependencies
###############################################################################
# Ensure that we can actually, like, compile anything
if [[ ! "$(type -P gcc)" && "$OSTYPE" =~ ^darwin ]]; then
    e_error "The XCode Command Line Tools must be installed first!"
    echo "https://developer.apple.com/downloads/index.action"
    exit 1
fi

# If Git is not installed...
if [[ ! "$(type -P git)" ]]; then
    # OS X
    if [[ "$OSTYPE" =~ ^darwin ]]; then
        # It's easiest to get Git via Homebrew, so get that first
        if [[ ! "$(type -P brew)" ]]; then
            e_header "Installing Homebrew..."
            true | ruby <(curl -fsS https://raw.github.com/mxcl/homebrew/go)
            e_header "Verifying Homebrew..."
            brew doctor
        fi
        # If Homebrew was installed, install Git
        if [[ "$(type -P brew)" ]]; then
            e_header "Updating Homebrew..."
            brew update
            e_header "Installing Git..."
            brew install git
        fi
    # Ubuntu
    elif [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]]; then
        # Git is fairly easy
        e_header "Installing Git..."
        sudo apt-get -qq install git-core
    fi
fi

# If Git isn't installed by now, something exploded. We gots to quit!
if [[ ! "$(type -P git)" ]]; then
    e_error "Git should be installed. It isn't. Aborting."
    exit 1
fi

###############################################################################
# dotfiles Installation
###############################################################################
# Update existing sudo time stamp if set, otherwise do nothing
while true; do
    sudo -n true;
    sleep 60;
    kill -0 "$$" || exit;
done 2>/dev/null &

# Initialize
if [[ ! -d ~/.dotfiles ]]; then
    new_dotfiles_install=1
    # ~/.dotfiles doesn't exist? Clone it!
    e_header "Downloading dotfiles..."
    git clone --recursive git://github.com/jcrafford/dotfiles.git ~/.dotfiles
    cd ~/.dotfiles
else
    # Make sure we have the latest files
    e_header "Updating dotfiles..."
    cd ~/.dotfiles
    git pull
    git submodule update --init --recursive --quiet
fi

# Ensure binaries are in the path
source ~/.dotfiles/source/.path
# Utilities, helpers
source ~/.dotfiles/config/utils.sh

# Tweak file globbing
shopt -s dotglob
shopt -s nullglob

###############################################################################
# OS-Specific Software Installation and Configuration
###############################################################################
source ~/.dotfiles/config/osx/osx.sh
source ~/.dotfiles/config/ubuntu/ubuntu.sh

###############################################################################
# Development Software Installation and Configuration
###############################################################################
source ~/.dotfiles/config/devel-setup.sh

###############################################################################
# Complete Installation
###############################################################################
chmod +x ~/.dotfiles/bin/*

~/.dotfiles/bin/sync

# Lest I forget to do a few additional things...
if [[ "$new_dotfiles_install" && -e "config/reminders.sh" ]]; then
    e_header "Reminders:"
    source "config/reminders.sh"
fi

# All done!
e_header "All done!"