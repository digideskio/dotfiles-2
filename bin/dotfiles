#!/bin/bash

echo 'dotfiles'

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP

Usage: $(basename "$0")

See the README for documentation.
https://github.com/jcrafford/dotfiles
HELP
exit; fi

function e_header()  { echo -e "\n\033[1m$@\033[0m"; }
function e_success() { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()   { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()   { echo -e " \033[1;33m➜\033[0m  $@"; }

###############################################################################
# Copy, Linking, and Backup Functions
###############################################################################
function copy_header() {
    e_header "Copying files into home directory...";
}

function copy_test() {
    if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
        echo "same file"
    elif [[ "$1" -ot "$2" ]]; then
        echo "destination file newer"
    fi
}

function copy_do() {
    e_success "Copying ~/$1"
    cp "$2" ~/
}

function link_header() {
    e_header "Linking files into home directory...";
}

function link_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
}

function link_do() {
    e_success "Linking ~/$1"
    ln -sf ${2#$HOME/} ~/
}

# Copy, link, backup, etc.
function do_stuff() {
    local base dest skip
    local files=(~/.dotfiles/$1/*)
    # No files? abort
    if ((${#files[@]} == 0)); then
        return;
    fi
    # Run _header function only if declared
    [[ $(declare -f "$1_header") ]] && "$1_header"
    # Iterate over files
    for file in "${files[@]}"; do
        base="$(basename $file)"
        dest="$HOME/$base"
        # Run _test function only if declared
        if [[ $(declare -f "$1_test") ]]; then
            # If _test function returns a string, skip file and print that message
            skip="$("$1_test" "$file" "$dest")"
            if [[ "$skip" ]]; then
                e_error "Skipping ~/$base, $skip"
                continue
            fi
            # Destination file already exists in ~/. Back it up!
            if [[ -e "$dest" ]]; then
                e_arrow "Backing up ~/$base"
                # Set backup flag, so a nice message can be shown at the end
                backup=1
                # Create backup dir if it doesn't already exist
                [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
                # Backup file / link / whatever
                mv "$dest" "$backup_dir"
            fi
        fi
        # Do stuff
        "$1_do" "$base" "$file"
    done
}

###############################################################################
# Installation Dependencies
###############################################################################
# Ensure that we can actually, like, compile anything
if [[ ! "$(type -P gcc)" && "$OSTYPE" =~ ^darwin ]]; then
    e_error "The XCode Command Line Tools must be installed first!"
    echo "https://developer.apple.com/downloads/index.action"
    exit 1
fi

# If Git is not installed...
if [[ ! "$(type -P git)" ]]; then
    # OS X
    if [[ "$OSTYPE" =~ ^darwin ]]; then
        # It's easiest to get Git via Homebrew, so get that first
        if [[ ! "$(type -P brew)" ]]; then
            e_header "Installing Homebrew..."
            true | ruby <(curl -fsS https://raw.github.com/mxcl/homebrew/go)
        fi
        # If Homebrew was installed, install Git
        if [[ "$(type -P brew)" ]]; then
            e_header "Updating Homebrew..."
            brew update
            e_header "Installing Git..."
            brew install git
        fi
    # Ubuntu
    elif [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]]; then
        # Git is fairly easy
        e_header "Installing Git..."
        sudo apt-get -qq install git-core
    fi
fi

# If Git isn't installed by now, something exploded. We gots to quit!
if [[ ! "$(type -P git)" ]]; then
    e_error "Git should be installed. It isn't. Aborting."
    exit 1
fi

###############################################################################
# dotfiles Installation
###############################################################################
# Update existing sudo time stamp if set, otherwise do nothing
while true; do
    sudo -n true;
    sleep 60;
    kill -0 "$$" || exit;
done 2>/dev/null &

# Initialize
if [[ ! -d ~/.dotfiles ]]; then
    new_dotfiles_install=1
    # ~/.dotfiles doesn't exist? Clone it!
    e_header "Downloading dotfiles..."
    git clone --recursive git://github.com/jcrafford/dotfiles.git ~/.dotfiles
    cd ~/.dotfiles
else
    # Make sure we have the latest files
    e_header "Updating dotfiles..."
    cd ~/.dotfiles
    git pull
    git submodule update --init --recursive --quiet
fi

# Ensure binaries are in the path
source ~/.dotfiles/source/.path
# Utilities, helpers
source ~/.dotfiles/config/utils.sh

# Tweak file globbing
shopt -s dotglob
shopt -s nullglob

# If backups are needed, this is where they'll go
backup_dir="$HOME/.dotfiles/backup/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

###############################################################################
# OS-Specific Software Installation and Configuration
###############################################################################
source ~/.dotfiles/config/osx/osx.sh
source ~/.dotfiles/config/ubuntu/ubuntu.sh

###############################################################################
# Complete Installation
###############################################################################
# Execute code for each file in these subdirectories
do_stuff "copy"
do_stuff "link"

# Alert if backups were made
if [[ "$backup" ]]; then
    echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# Lest I forget to do a few additional things...
if [[ "$new_dotfiles_install" && -e "config/reminders.sh" ]]; then
    e_header "Reminders:"
    source "config/reminders.sh"
fi

# All done!
e_success "All done!"